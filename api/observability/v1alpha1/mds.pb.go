// Code generated by protoc-gen-go. DO NOT EDIT.
// source: observability/v1alpha1/mds.proto

package kuma_observability_v1alpha1

import (
	context "context"
	fmt "fmt"
	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MDS resource type.
//
// Describes a group of targets that need to be monitored.
type MonitoringAssignment struct {
	// MDS resource name.
	//
	// E.g., `/meshes/default/services/backend` or `/meshes/default/dataplanes/backend-01`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of targets that need to be monitored.
	Targets []*MonitoringAssignment_Target `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// Labels associated with every target in that assignment.
	//
	// E.g., `["job" : "backend"]`.
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MonitoringAssignment) Reset()         { *m = MonitoringAssignment{} }
func (m *MonitoringAssignment) String() string { return proto.CompactTextString(m) }
func (*MonitoringAssignment) ProtoMessage()    {}
func (*MonitoringAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52924b3c3258c88, []int{0}
}

func (m *MonitoringAssignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringAssignment.Unmarshal(m, b)
}
func (m *MonitoringAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringAssignment.Marshal(b, m, deterministic)
}
func (m *MonitoringAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringAssignment.Merge(m, src)
}
func (m *MonitoringAssignment) XXX_Size() int {
	return xxx_messageInfo_MonitoringAssignment.Size(m)
}
func (m *MonitoringAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringAssignment proto.InternalMessageInfo

func (m *MonitoringAssignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MonitoringAssignment) GetTargets() []*MonitoringAssignment_Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *MonitoringAssignment) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Describes a single target that needs to be monitored.
type MonitoringAssignment_Target struct {
	// Labels associated with that particular target.
	//
	// E.g.,
	// `[
	//    "__address__" :      "192.168.0.1:8080",
	//    "__metrics_path__" : "/metrics"]`,
	//    "instance" :         "backend-01",
	//  ]`.
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MonitoringAssignment_Target) Reset()         { *m = MonitoringAssignment_Target{} }
func (m *MonitoringAssignment_Target) String() string { return proto.CompactTextString(m) }
func (*MonitoringAssignment_Target) ProtoMessage()    {}
func (*MonitoringAssignment_Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52924b3c3258c88, []int{0, 0}
}

func (m *MonitoringAssignment_Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringAssignment_Target.Unmarshal(m, b)
}
func (m *MonitoringAssignment_Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringAssignment_Target.Marshal(b, m, deterministic)
}
func (m *MonitoringAssignment_Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringAssignment_Target.Merge(m, src)
}
func (m *MonitoringAssignment_Target) XXX_Size() int {
	return xxx_messageInfo_MonitoringAssignment_Target.Size(m)
}
func (m *MonitoringAssignment_Target) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringAssignment_Target.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringAssignment_Target proto.InternalMessageInfo

func (m *MonitoringAssignment_Target) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*MonitoringAssignment)(nil), "kuma.observability.v1alpha1.MonitoringAssignment")
	proto.RegisterMapType((map[string]string)(nil), "kuma.observability.v1alpha1.MonitoringAssignment.LabelsEntry")
	proto.RegisterType((*MonitoringAssignment_Target)(nil), "kuma.observability.v1alpha1.MonitoringAssignment.Target")
	proto.RegisterMapType((map[string]string)(nil), "kuma.observability.v1alpha1.MonitoringAssignment.Target.LabelsEntry")
}

func init() { proto.RegisterFile("observability/v1alpha1/mds.proto", fileDescriptor_a52924b3c3258c88) }

var fileDescriptor_a52924b3c3258c88 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xbf, 0x6e, 0x13, 0x31,
	0x18, 0xc0, 0xf1, 0x5d, 0x09, 0xaa, 0xbb, 0x20, 0xab, 0x12, 0x27, 0xb7, 0xc0, 0x29, 0x30, 0x04,
	0x06, 0x1f, 0x0d, 0x4b, 0x89, 0xc4, 0x00, 0x0a, 0x4c, 0xb0, 0x5c, 0x61, 0x63, 0xf9, 0x92, 0x7c,
	0xba, 0x5a, 0xf5, 0xd9, 0x87, 0xed, 0x58, 0xba, 0xb5, 0x13, 0x3b, 0x4f, 0xc0, 0x6b, 0xb0, 0xc0,
	0x3b, 0xf0, 0x0a, 0x2c, 0xbc, 0x05, 0xc2, 0xd7, 0x04, 0x52, 0x1d, 0x91, 0x00, 0xb1, 0xf9, 0xbe,
	0x3f, 0xbf, 0xdf, 0x77, 0x96, 0x3f, 0x9a, 0x9b, 0x99, 0x43, 0x1b, 0x60, 0x26, 0x95, 0xf4, 0x6d,
	0x11, 0x8e, 0x40, 0x35, 0xa7, 0x70, 0x54, 0xd4, 0x0b, 0x27, 0x1a, 0x6b, 0xbc, 0x61, 0x07, 0x67,
	0xcb, 0x1a, 0xc4, 0x46, 0x99, 0x58, 0x95, 0xf1, 0x43, 0xd4, 0xc1, 0xb4, 0x05, 0x34, 0xb2, 0x08,
	0xe3, 0x62, 0x21, 0xdd, 0xdc, 0x04, 0xb4, 0x6d, 0xd7, 0xca, 0x0f, 0x2b, 0x63, 0x2a, 0x85, 0x31,
	0x0d, 0x5a, 0x1b, 0x0f, 0x5e, 0x1a, 0x7d, 0x01, 0xe6, 0x37, 0x02, 0x28, 0xb9, 0x00, 0x8f, 0xc5,
	0xea, 0xd0, 0x25, 0x86, 0x9f, 0x52, 0xba, 0xff, 0xd2, 0x68, 0xe9, 0x8d, 0x95, 0xba, 0x7a, 0xe2,
	0x9c, 0xac, 0x74, 0x8d, 0xda, 0xb3, 0x9b, 0x74, 0x47, 0x43, 0x8d, 0x19, 0xc9, 0xc9, 0x68, 0xf7,
	0xe9, 0xee, 0xc7, 0x6f, 0x9f, 0xd3, 0x1d, 0x9b, 0xe4, 0xa4, 0x8c, 0x61, 0x56, 0xd2, 0x6b, 0x1e,
	0x6c, 0x85, 0xde, 0x65, 0x49, 0x9e, 0x8e, 0xf6, 0xc6, 0xc7, 0x62, 0xcb, 0xec, 0xa2, 0x4f, 0x21,
	0x5e, 0x45, 0x40, 0xb9, 0x02, 0xb1, 0xd7, 0x74, 0xa0, 0x60, 0x86, 0xca, 0x65, 0x69, 0x44, 0x3e,
	0xfe, 0x73, 0xe4, 0x8b, 0xd8, 0xff, 0x4c, 0x7b, 0xdb, 0x96, 0x17, 0x30, 0xfe, 0x81, 0xd0, 0x41,
	0xa7, 0x62, 0x6f, 0xd6, 0x06, 0x12, 0x0d, 0xd3, 0xbf, 0x1d, 0xba, 0x57, 0xf4, 0x88, 0xee, 0xfd,
	0x12, 0x66, 0xd7, 0x69, 0x7a, 0x86, 0x6d, 0x77, 0x81, 0xe5, 0x8f, 0x23, 0xdb, 0xa7, 0x57, 0x03,
	0xa8, 0x25, 0x66, 0x49, 0x8c, 0x75, 0x1f, 0x93, 0xe4, 0x98, 0xfc, 0x43, 0xeb, 0xf8, 0x3c, 0xa5,
	0xf9, 0xcf, 0x49, 0xbb, 0xf1, 0xa6, 0xab, 0xc7, 0x71, 0x82, 0x36, 0xc8, 0x39, 0xb2, 0x9a, 0xf2,
	0x29, 0x2a, 0x0f, 0x7d, 0xbf, 0xe4, 0xd8, 0x1d, 0x11, 0x9f, 0x96, 0x80, 0x46, 0x8a, 0x30, 0x16,
	0xb1, 0x72, 0x8d, 0x28, 0xf1, 0xed, 0x12, 0x9d, 0xe7, 0x77, 0xb7, 0x17, 0xb9, 0xc6, 0x68, 0x87,
	0xc3, 0x2b, 0x23, 0xf2, 0x80, 0xb0, 0x05, 0x3d, 0x38, 0xf1, 0x16, 0xa1, 0xee, 0xf7, 0xdd, 0xba,
	0x84, 0xba, 0xac, 0xba, 0xfd, 0xdb, 0xfc, 0x86, 0xe5, 0x1d, 0xa1, 0xfc, 0x39, 0xfa, 0xf9, 0xe9,
	0x7f, 0xb2, 0xdc, 0x3b, 0xff, 0xf2, 0xf5, 0x7d, 0xc2, 0x87, 0xd9, 0xc6, 0xbe, 0x4d, 0xea, 0xb5,
	0x2d, 0xe6, 0xd3, 0x09, 0xb9, 0x3f, 0x1b, 0xc4, 0x6d, 0x7a, 0xf8, 0x3d, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x1a, 0xfd, 0x09, 0xe3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitoringTargetDiscoveryServiceClient is the client API for MonitoringTargetDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitoringTargetDiscoveryServiceClient interface {
	DeltaMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringTargetDiscoveryService_DeltaMonitoringAssignmentsClient, error)
	StreamMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringTargetDiscoveryService_StreamMonitoringAssignmentsClient, error)
	FetchMonitoringAssignments(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type monitoringTargetDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewMonitoringTargetDiscoveryServiceClient(cc *grpc.ClientConn) MonitoringTargetDiscoveryServiceClient {
	return &monitoringTargetDiscoveryServiceClient{cc}
}

func (c *monitoringTargetDiscoveryServiceClient) DeltaMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringTargetDiscoveryService_DeltaMonitoringAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitoringTargetDiscoveryService_serviceDesc.Streams[0], "/kuma.observability.v1alpha1.MonitoringTargetDiscoveryService/DeltaMonitoringAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsClient{stream}
	return x, nil
}

type MonitoringTargetDiscoveryService_DeltaMonitoringAssignmentsClient interface {
	Send(*v2.DeltaDiscoveryRequest) error
	Recv() (*v2.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsClient struct {
	grpc.ClientStream
}

func (x *monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsClient) Send(m *v2.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsClient) Recv() (*v2.DeltaDiscoveryResponse, error) {
	m := new(v2.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringTargetDiscoveryServiceClient) StreamMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringTargetDiscoveryService_StreamMonitoringAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitoringTargetDiscoveryService_serviceDesc.Streams[1], "/kuma.observability.v1alpha1.MonitoringTargetDiscoveryService/StreamMonitoringAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsClient{stream}
	return x, nil
}

type MonitoringTargetDiscoveryService_StreamMonitoringAssignmentsClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsClient struct {
	grpc.ClientStream
}

func (x *monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringTargetDiscoveryServiceClient) FetchMonitoringAssignments(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/kuma.observability.v1alpha1.MonitoringTargetDiscoveryService/FetchMonitoringAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringTargetDiscoveryServiceServer is the server API for MonitoringTargetDiscoveryService service.
type MonitoringTargetDiscoveryServiceServer interface {
	DeltaMonitoringAssignments(MonitoringTargetDiscoveryService_DeltaMonitoringAssignmentsServer) error
	StreamMonitoringAssignments(MonitoringTargetDiscoveryService_StreamMonitoringAssignmentsServer) error
	FetchMonitoringAssignments(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

// UnimplementedMonitoringTargetDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitoringTargetDiscoveryServiceServer struct {
}

func (*UnimplementedMonitoringTargetDiscoveryServiceServer) DeltaMonitoringAssignments(srv MonitoringTargetDiscoveryService_DeltaMonitoringAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method DeltaMonitoringAssignments not implemented")
}
func (*UnimplementedMonitoringTargetDiscoveryServiceServer) StreamMonitoringAssignments(srv MonitoringTargetDiscoveryService_StreamMonitoringAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMonitoringAssignments not implemented")
}
func (*UnimplementedMonitoringTargetDiscoveryServiceServer) FetchMonitoringAssignments(ctx context.Context, req *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMonitoringAssignments not implemented")
}

func RegisterMonitoringTargetDiscoveryServiceServer(s *grpc.Server, srv MonitoringTargetDiscoveryServiceServer) {
	s.RegisterService(&_MonitoringTargetDiscoveryService_serviceDesc, srv)
}

func _MonitoringTargetDiscoveryService_DeltaMonitoringAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringTargetDiscoveryServiceServer).DeltaMonitoringAssignments(&monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsServer{stream})
}

type MonitoringTargetDiscoveryService_DeltaMonitoringAssignmentsServer interface {
	Send(*v2.DeltaDiscoveryResponse) error
	Recv() (*v2.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsServer struct {
	grpc.ServerStream
}

func (x *monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsServer) Send(m *v2.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringTargetDiscoveryServiceDeltaMonitoringAssignmentsServer) Recv() (*v2.DeltaDiscoveryRequest, error) {
	m := new(v2.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MonitoringTargetDiscoveryService_StreamMonitoringAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringTargetDiscoveryServiceServer).StreamMonitoringAssignments(&monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsServer{stream})
}

type MonitoringTargetDiscoveryService_StreamMonitoringAssignmentsServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsServer struct {
	grpc.ServerStream
}

func (x *monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringTargetDiscoveryServiceStreamMonitoringAssignmentsServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MonitoringTargetDiscoveryService_FetchMonitoringAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringTargetDiscoveryServiceServer).FetchMonitoringAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuma.observability.v1alpha1.MonitoringTargetDiscoveryService/FetchMonitoringAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringTargetDiscoveryServiceServer).FetchMonitoringAssignments(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitoringTargetDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kuma.observability.v1alpha1.MonitoringTargetDiscoveryService",
	HandlerType: (*MonitoringTargetDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMonitoringAssignments",
			Handler:    _MonitoringTargetDiscoveryService_FetchMonitoringAssignments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeltaMonitoringAssignments",
			Handler:       _MonitoringTargetDiscoveryService_DeltaMonitoringAssignments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamMonitoringAssignments",
			Handler:       _MonitoringTargetDiscoveryService_StreamMonitoringAssignments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "observability/v1alpha1/mds.proto",
}
